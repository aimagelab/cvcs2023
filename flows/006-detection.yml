title: "Object Detection"
description: |
    # Object Detection

    ### Instructions
    - After completing an exercise, click on "**Submit answer for feedback**" to have your code corrected. Clicking
      "Save answer" will just save the answer in a draft state.
    - After completing the session, remember to click on **the green tick box** in the upper-right to submit the
      overall test. Otherwise, the full test will be considered in a draft state.

notify_on_submit:
  - lorenzo.baraldi@unimore.it


rules:
    start:
    -
        if_has_role: [student, ta, instructor]
        may_start_new_session: True
        may_list_existing_sessions: True

    -
        may_start_new_session: False
        may_list_existing_sessions: True

    access:
    -
        permissions: [view, submit_answer, end_session, see_correctness, change_answer, send_email_about_flow_page]

    grade_aggregation_strategy: use_latest

    grade_identifier: detection
    grading:
    -
        credit_percent: 100

groups:
-
    id: quiz_start
    shuffle: False
    pages:

    -
          type: PythonCodeQuestion
          id: roipooling
          access_rules:
              add_permissions:
                 - change_answer
          value: 1
          timeout: 30
          show_setup_code: True
          prompt: |
              # ROI Pooling
              Implement a ROI Pooling operator. Your code will be given the following variables:

              - `input`, a mini-batch of feature maps (a `torch.Tensor` with shape `(n, C, H, W)` and `dtype` `torch.float32`)
              - `boxes`, a list of bounding box coordinates on which you need to perform the ROI Pooling. `boxes` will be
              a list of `(L,4)` `torch.Tensor` with `dtype` `torch.float32`, where `boxes[i]` will refer to the `i`-th element of the batch, and contain
              `L` coordinates in the format `(y1, x1, y2, x2)`
              - a tuple of integers `output_size`, containing the number of cells over which pooling is performed, in the format (heigth, width)

              The code should produce an output `torch.Tensor` `out` with dtype `torch.float32` and shape `(n, L, C, output_size[0], output_size[1])`.

          setup_code: |
            import random
            import torch

            n = random.randint(1, 3)
            C = random.randint(10, 20)
            H = random.randint(5, 10)
            W = random.randint(5, 10)
            oH = random.randint(2, 4)
            oW = random.randint(2, 4)
            L = random.randint(2, 6)
            input = torch.rand(n, C, H, W)
            boxes = [torch.zeros(L, 4) for _ in range(n)]
            for i in range(n):
              boxes[i][:, 0] = torch.rand(L) * (H-oH)       # y
              boxes[i][:, 1] = torch.rand(L) * (W-oW)       # x
              boxes[i][:, 2] = oH + torch.rand(L) * (H-oH)  # w
              boxes[i][:, 3] = oW + torch.rand(L) * (W-oW)  # h

              boxes[i][:,2:] += boxes[i][:,:2]
              boxes[i][:,2] = torch.clamp(boxes[i][:,2], max=H-1)
              boxes[i][:,3] = torch.clamp(boxes[i][:,3], max=W-1)
            output_size = (oH, oW)


          names_for_user: [input, boxes, output_size]

          names_from_user: [out, ]

          test_code: |
            import torch
            import torchvision.ops

            perm = torch.LongTensor([1, 0, 3, 2])
            boxes_ref = [b[:, perm] for b in boxes]
            ref = torchvision.ops.roi_pool(input, boxes_ref, output_size).view((n, L, C, oH, oW))

            # Check array features
            if not isinstance(out, torch.Tensor):
              feedback.add_feedback("'%s' is not a torch.Tensor" % "out")
              feedback.set_points(0)
              raise GradingComplete()
            if out.shape != ref.shape:
              feedback.add_feedback("'%s' does not have the correct shape. Expected %s, got %s." % ("out", ref.shape, out.shape))
              raise GradingComplete()

            good = torch.allclose(ref, out)
            if not good:
              feedback.add_feedback("'%s' is inaccurate" % "out")
              feedback.set_points(0)
              raise GradingComplete()

            feedback.set_points(1)
            raise GradingComplete
